[
  {
    "gql-service": {
      "1.0.0": {
        "$schema": "http://json-schema.org/draft-06/schema#",
        "properties": {
          "Query": {
            "type": "object",
            "properties": {
              "todo": {
                "type": "object",
                "properties": {
                  "return": {
                    "$ref": "#/definitions/Todo"
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/String"
                      },
                      "isCompleted": {
                        "$ref": "#/definitions/Boolean",
                        "default": false,
                        "description": "A default value of false"
                      }
                    },
                    "required": ["id"]
                  }
                },
                "required": ["assksk"],
                "description": "A Query with 1 required argument and 1 optional argument"
              },
              "todos": {
                "type": "object",
                "properties": {
                  "return": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Todo"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {
                      "ids": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/String"
                        },
                        "description": "Reauired argument that is a list that cannot contain null values"
                      }
                    },
                    "required": ["ids"]
                  }
                },
                "required": [],
                "description": "Returns a list (or null) that can contain null values"
              }
            },
            "required": []
          },
          "Mutation": {
            "type": "object",
            "properties": {
              "create_todo": {
                "type": "object",
                "properties": {
                  "return": {
                    "$ref": "#/definitions/Todo"
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {
                      "todo": {
                        "$ref": "#/definitions/TodoInputType"
                      }
                    },
                    "required": ["todo"]
                  }
                },
                "required": [],
                "description": "A Mutation with 1 required argument"
              },
              "update_todo": {
                "type": "object",
                "properties": {
                  "return": {
                    "$ref": "#/definitions/Todo"
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "$ref": "#/definitions/String"
                      },
                      "data": {
                        "$ref": "#/definitions/TodoInputType"
                      }
                    },
                    "required": ["id", "data"]
                  }
                },
                "required": [],
                "description": "A Mutation with 2 required arguments"
              },
              "update_todos": {
                "type": "object",
                "properties": {
                  "return": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Todo"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {
                      "ids": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/String"
                        }
                      },
                      "data": {
                        "$ref": "#/definitions/TodoInputType"
                      }
                    },
                    "required": ["ids", "data"]
                  }
                },
                "required": [],
                "description": "Returns a list (or null) that can contain null values"
              }
            },
            "required": []
          }
        },
        "definitions": {
          "Todo": {
            "type": "object",
            "properties": {
              "id": {
                "type": "object",
                "properties": {
                  "return": {
                    "$ref": "#/definitions/String"
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {},
                    "required": []
                  }
                },
                "required": []
              },
              "name": {
                "type": "object",
                "properties": {
                  "return": {
                    "$ref": "#/definitions/String"
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {},
                    "required": []
                  }
                },
                "required": []
              },
              "completed": {
                "type": "object",
                "properties": {
                  "return": {
                    "$ref": "#/definitions/Boolean"
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {},
                    "required": []
                  }
                },
                "required": []
              },
              "color": {
                "type": "object",
                "properties": {
                  "return": {
                    "$ref": "#/definitions/Color"
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {},
                    "required": []
                  }
                },
                "required": []
              },
              "colors": {
                "type": "object",
                "properties": {
                  "return": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Color"
                    }
                  },
                  "arguments": {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "type": "array",
                        "items": {
                          "$ref": "#/definitions/Color"
                        }
                      }
                    },
                    "required": ["filter"]
                  }
                },
                "required": [],
                "description": "A field that requires an argument"
              }
            },
            "required": ["id", "name", "colors"]
          },
          "String": {
            "type": "string",
            "title": "String",
            "description": "The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."
          },
          "Boolean": {
            "type": "boolean",
            "title": "Boolean",
            "description": "The `Boolean` scalar type represents `true` or `false`."
          },
          "TodoInputType": {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/definitions/String"
              },
              "completed": {
                "$ref": "#/definitions/Boolean"
              },
              "color": {
                "$ref": "#/definitions/Color",
                "default": "RED"
              }
            },
            "required": ["name"]
          },
          "Color": {
            "type": "string",
            "anyOf": [
              {
                "enum": ["RED"],
                "title": "Red color",
                "description": "Red color"
              },
              {
                "enum": ["GREEN"],
                "title": "Green color",
                "description": "Green color"
              }
            ]
          }
        }
      }
    }
  }
]
